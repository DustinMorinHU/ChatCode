{
  "_from": "rtcpeerconnection",
  "_id": "rtcpeerconnection@8.4.0",
  "_inBundle": false,
  "_integrity": "sha512-HgntXWv+7DRufcGUroOSSNTpAIFRwLWCiLyutwfyVfrmPI7E5n7xP4JlwFWC6XNJV/LBILNru9bYa/FWcvyUuA==",
  "_location": "/rtcpeerconnection",
  "_phantomChildren": {},
  "_requested": {
    "escapedName": "rtcpeerconnection",
    "fetchSpec": "latest",
    "name": "rtcpeerconnection",
    "raw": "rtcpeerconnection",
    "rawSpec": "",
    "registry": true,
    "saveSpec": null,
    "type": "tag"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/rtcpeerconnection/-/rtcpeerconnection-8.4.0.tgz",
  "_shasum": "b8633d983353c278fef06f7179552f4daef479f1",
  "_spec": "rtcpeerconnection",
  "_where": "/home/dustin/Documents/GIT/ChatCode",
  "author": {
    "email": "henrik@andyet.net",
    "name": "Henrik Joreteg"
  },
  "bugs": {
    "url": "https://github.com/otalk/RTCPeerConnection/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "lodash.clonedeep": "^4.3.2",
    "sdp-jingle-json": "^3.0.0",
    "wildemitter": "1.x"
  },
  "deprecated": false,
  "description": "A tiny browser module that normalizes and simplifies the API for WebRTC peer connections.",
  "devDependencies": {
    "babel-preset-es2015": "^6.9.0",
    "babelify": "^7.3.0",
    "browserify": "^13.0.1",
    "jshint": "^2.9.1",
    "precommit-hook": "^3.0",
    "tape": "^4.0.0",
    "testling": "^1.7.1",
    "travis-multirunner": "^3.3.0",
    "webrtc-adapter": "^6.0.2"
  },
  "homepage": "https://github.com/otalk/RTCPeerConnection#readme",
  "keywords": [
    "Jingle",
    "RTCPeerConnection",
    "WebRTC",
    "browser"
  ],
  "license": "MIT",
  "main": "rtcpeerconnection.js",
  "name": "rtcpeerconnection",
  "optionalDependencies": {},
  "pre-commit": [
    "lint",
    "test",
    "validate"
  ],
  "readme": "# RTCPeerConnection\n\n\n## What is this?\n\nA tiny browser module that normalizes and simplifies the API for WebRTC peer connections.\n\nIt gives us a cleaner (cross-browser) way to handle offer/answer and is based on an event emitter.\n\nIf you're not using browserify or you want AMD support use `rtcpeerconnection.bundle.js`.\n\n## Installing\n\n```\nnpm install rtcpeerconnection\n```\n\n## How to use it\n\n\n### Instantiation\n\nInstantiation takes the same options as a normal peer connection constructor:\n\n```js\nvar PeerConnection = require('rtcpeerconnection');\n\n\n// init it like a normal peer connection object\n// passing in ice servers/constraints the initial server config\n// also takes a couple other options:\n// debug: true (to log out all emitted events)\nvar pc = new PeerConnection({config servers as usual}, {constraints as to regular PC});\n```\n\n\n### Events\n\n\nUnlike stock Peer Connections this inherits from a generic event emitter. Powered by [WildEmitter](http://github.com/henrikjoreteg/wildemitter) which has a very familiar API if you're used to node.js/jQuery/Backbone but also includes a wildcard handler so you can easily debug events. Just do `emitter.on('*')` to log them out or whatnot.\n\nBut instead of doing `pc.onicecandidate = function () {}` on a peer connection you listen for events like this:\n\n\n```js\n\n// ice candidates\npc.on('ice', function (candidate) {\n    // it's your job to send these to someone\n    connection.send('ice', candidate);\n});\n\n// you can listen for end of candidates (not particularly useful)\npc.on('endOfCandidates', function () {\n    // no more ice candidates\n});\n\n// remote stream added\npc.on('addStream', function (event) {\n    // do something with event.stream\n    // probably attach it to a <video> element\n    // and play it.\n});\n\n// remote stream removed\npc.on('removeStream', function (event) {\n    // remote stream removed\n    // now you could hide/disable removed video\n});\n\n// you can chose to listen for events for \n// offers and answers instead, if you prefer \npc.on('answer', function (err, answer) { ... });\npc.on('offer', function (err, offer) { ... });\n\n// on peer connection close\npc.on('close', function () { ... });\n```\n\n\n### Methods\n\nNote that all callbacks follow the \"error first\" convention. Meaning, rather than pass a success and fail callback, you pass a single callback.\n\nIf there is an error, the first argument passed to the callback will be a truthy value (the error itself).\n\nThe whole offer/answer cycle looks like this:\n\n```js\n// assumptions\nvar pc = new PeerConnection(config, constraints);\nvar connection = new RealTimeConnection(); // could be socket.io or whatever\n\n\n// create an offer\npc.offer(function (err, offer) {\n    if (!err) connection.send('offer', offer)\n});\n\n// you can also optionally pass in constraints\n// when creating an offer.\npc.offer(\n    {\n        offerToReceiveAudio: true,\n        offerToReceiveVideo: false\n    }, \n    function (err, offer) {\n        if (!err) connection.send('offer', offer);\n    }\n);\n\n// when you recieve an offer, you can answer\n// with various options\nconnection.on('offer', function (offer) {\n    // let the peerconnection handle the offer\n    // by calling handleOffer\n    pc.handleOffer(offer, function (err) {\n        if (err) {\n            // handle error\n            return;\n        }\n\n        // you can just call answer\n        pc.answer(function (err, answer) {\n            if (!err) connection.send('answer', answer);\n        });\n\n        // you can call answer with contstraints\n        pc.answer(MY_CONSTRAINTS, function (err, answer) {\n            if (!err) connection.send('answer', answer);\n        });    \n\n        // or you can use one of the shortcuts answers\n\n        // for video only\n        pc.answerVideoOnly(function (err, answer) { ... });\n\n        // and audio only\n        pc.answerAudioOnly(function (err, answer) { ... });\n    }); \n});\n\n// when you get an answer, you just call\n// handleAnswer\nconnection.on('answer', function (answer) {\n    pc.handleAnswer(answer);\n});\n\n// the only other thing you have to do is listen, transmit, and process ice candidates\n\n// you have to send them when generated\npc.on('ice', function (candidate) {\n    connection.send('ice', candidate);\n});\n\n// process incoming ones\nconnection.on('ice', function (candidate) {\n    pc.processIce(candidate);\n});\n```\n\n\nThat's it!\n\n\n## More\n\nIf you want higher level functionality look at [SimpleWebRTC](http://simplewebrtc.com) that uses this library.\n\n\n## License\n\nMIT\n\n## Credits\n\nIf you like this, follow: [@HenrikJoreteg](http://twitter.com/henrikjoreteg) on twitter.\n\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/otalk/RTCPeerConnection.git"
  },
  "scripts": {
    "build": "node build.js",
    "lint": "jshint .",
    "test-travis": "test/run-tests",
    "validate": "npm ls"
  },
  "testling": {
    "browsers": [
      "chrome/32..latest",
      "firefox/24..latest",
      "ie/10..latest",
      "opera/18..latest",
      "safari/latest"
    ],
    "files": "test/*.js"
  },
  "version": "8.4.0"
}
